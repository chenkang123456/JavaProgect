package com.yueqian.faq.servlet;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FileUtils;

import com.yueqian.faq.common.DifficultyLevel;
import com.yueqian.faq.common.ProblemStatus;
import com.yueqian.faq.common.Utils;
import com.yueqian.faq.domain.CategoryInfo;
import com.yueqian.faq.domain.PageInfo;
import com.yueqian.faq.domain.ProblemDetailInfo;
import com.yueqian.faq.domain.ProblemInfo;
import com.yueqian.faq.domain.UserInfo;
import com.yueqian.faq.service.CategoryService;
import com.yueqian.faq.service.ProblemService;

/**
 * Servlet implementation class ProblemServlet
 */
@WebServlet("/problemServlet")
public class ProblemServlet extends BaseServlet {
	private static final long serialVersionUID = 1L;

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String flag = super.parseReqParam(req, "flag", String.class);
		if (flag == null) {
			// 主页，获取推荐问题，未处理问题，已处理问题。。。。
			super.setStatisticsInfo(req);
			req.getRequestDispatcher("/index.jsp").forward(req, resp);
		} else if ("preQuestion".equals(flag)) {
			super.setStatisticsInfo(req);
			// 从数据库中读取问题类别列表
			List<CategoryInfo> categoryList = CategoryService.getInstance().findAllCategories();
			req.setAttribute("categoryList", categoryList);
			// 转发
			req.getRequestDispatcher("/question.jsp").forward(req, resp);
		} else if ("unresolved".equals(flag)) {

			// problemServlet?flag=unresolved
			// problemServlet?flag=unresolved&current=1&dir=pre/next
			// problemServlet?flag=unresolved&pageNo=3
			super.setStatisticsInfo(req);
			int pageNo = 1;

			Integer pn = super.parseReqParam(req, "pageNo", Integer.class);
			if (pn != null) {
				pageNo = pn;
			} else {
				Integer cu = super.parseReqParam(req, "current", Integer.class);
				String dir = super.parseReqParam(req, "dir", String.class);
				if (cu != null && dir != null) {
					if ("pre".equals(dir)) {
						pageNo = --cu;
					} else if ("next".equals(dir)) {
						pageNo = ++cu;
					}
				}
			}

			// 显示未解决问题列表
			PageInfo pageInfo = ProblemService.getInstance().findProblemList(pageNo, false);
			req.setAttribute("pageInfo", pageInfo);

			// 总页数，当前页
			req.getRequestDispatcher("/unresolved.jsp").forward(req, resp);
		} else if ("detail".equals(flag)) {
			super.setStatisticsInfo(req);
			// 查看问题详情
			Integer probId = super.parseReqParam(req, "probId", Integer.class);
			// 根据问题编号查询问题相关的信息，最佳回复，所有回复
			if (probId != null) {
				ProblemDetailInfo detail = ProblemService.getInstance().findDetailById(probId);
				req.setAttribute("detail", detail);
			}
			req.getRequestDispatcher("/detail.jsp").forward(req, resp);
		} else if ("picture".equals(flag)) {
			String fileId = super.parseReqParam(req, "fileId", String.class);
			if (fileId != null) {
				File dir = super.getPictureDir();
				File file = new File(dir, fileId);
				// 判断文件是否存在
				if (file.exists()) {
					// 从数据中获取该文件的类型
					ProblemInfo info = ProblemService.getInstance().findInfoByFileId(fileId);
					// 返回应答
					resp.setContentType(info.getFileType());
					// 返回字节数据
					FileUtils.copyFile(file, resp.getOutputStream());
				}
			}
		} else if ("resolved".equals(flag)) {
			super.setStatisticsInfo(req);
			int pageNo = 1;

			Integer pn = super.parseReqParam(req, "pageNo", Integer.class);
			if (pn != null) {
				pageNo = pn;
			} else {
				Integer cu = super.parseReqParam(req, "current", Integer.class);
				String dir = super.parseReqParam(req, "dir", String.class);
				if (cu != null && dir != null) {
					if ("pre".equals(dir)) {
						pageNo = --cu;
					} else if ("next".equals(dir)) {
						pageNo = ++cu;
					}
				}
			}

			// 显示未解决问题列表
			PageInfo pageInfo = ProblemService.getInstance().findProblemList(pageNo, true);
			req.setAttribute("pageInfo", pageInfo);

			// 总页数，当前页
			req.getRequestDispatcher("/resolved.jsp").forward(req, resp);
		} else if ("recommend".equals(flag)) {
			super.setStatisticsInfo(req);
			int pageNo = 1;

			Integer pn = super.parseReqParam(req, "pageNo", Integer.class);
			if (pn != null) {
				pageNo = pn;
			} else {
				Integer cu = super.parseReqParam(req, "current", Integer.class);
				String dir = super.parseReqParam(req, "dir", String.class);
				if (cu != null && dir != null) {
					if ("pre".equals(dir)) {
						pageNo = --cu;
					} else if ("next".equals(dir)) {
						pageNo = ++cu;
					}
				}
			}

			// 推荐问题列表
			PageInfo pageInfo = ProblemService.getInstance().findRecommendProblemList(pageNo);
			req.setAttribute("pageInfo", pageInfo);

			// 总页数，当前页
			req.getRequestDispatcher("/recommend.jsp").forward(req, resp);
		}
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		if (ServletFileUpload.isMultipartContent(req)) {
			// 发布问题
			ProblemInfo info = new ProblemInfo();
			UserInfo userInfo = super.getLoginedUserInfo(req);
			List<FileItem> itemList = super.parseMultipartRequest(req);
			FileItem item;
			String fieldName, fieldValue;
			if (itemList != null) {
				for (int i = 0; i < itemList.size(); i++) {
					item = itemList.get(i);
					if (item.isFormField()) {
						// 普通表单字段
						fieldName = item.getFieldName();
						fieldValue = item.getString("UTF-8");
						switch (fieldName) {
						case "category":
							int cateId = Utils.convert2Integer(fieldValue);
							if (cateId > 0)
								info.setCategoryId(cateId);
							break;
						case "title":
							info.setTitle(fieldValue);
							break;
						case "difficultyLevel":
							if (Utils.convert2Integer(fieldValue) != null) {
								info.setLevel(DifficultyLevel.from(Utils.convert2Integer(fieldValue).byteValue()));
							}
							break;
						case "score":
							info.setScore(Utils.convert2Integer(fieldValue));
							break;
						case "detail":
							info.setContent(fieldValue);
							break;
						}
					} else {
						// 文件
						if (item.getInputStream().available() > 0) {
							String fileId = Utils.createFileId();
							String type = item.getContentType();
							String fileName = item.getName();
							File dir = super.getPictureDir();
							FileUtils.copyInputStreamToFile(item.getInputStream(), new File(dir, fileId));
							info.setFileId(fileId);
							info.setFileName(fileName);
							info.setFileType(type);
						}
					}
				}

				// 数据的合法性检查
				if (info.getTitle() == null || info.getTitle().length() == 0 || info.getContent() == null
						|| info.getContent().length() == 0) {
					req.getRequestDispatcher("/question.jsp").forward(req, resp);
					return;
				}
				if (userInfo == null) {
					req.getRequestDispatcher("/login.jsp").forward(req, resp);
					return;
				}
				// 设置发布问题的用户ID
				info.setSubmitUserId(userInfo.getUserId());
				info.setSubmitTime(new Date());
				// 设置问题状态
				info.setStatus(ProblemStatus.UNRESOLVED);

				// 将信息保存到数据库
				boolean result = ProblemService.getInstance().saveInfo(info);
				// 重定向到未处理问题页面
				resp.sendRedirect(req.getContextPath() + "/problemServlet?flag=unresolved&msgCode="
						+ (result ? "addSuccess" : "addFailure"));
			}
		} else {
			String flag = super.parseReqParam(req, "flag", String.class);
			if ("".equals(flag)) {

			}
		}

	}
}
